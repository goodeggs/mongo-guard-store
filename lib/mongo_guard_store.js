// Generated by CoffeeScript 1.7.1
(function() {
  var GuardStoreEntry, MongoGuardStore, flatten, mongoose, schema;

  mongoose = require('mongoose');

  flatten = require('flat').flatten;

  schema = new mongoose.Schema({
    request: {
      url: {
        type: String,
        required: true,
        index: true
      },
      headers: {}
    },
    cached: {
      createdAt: {
        type: Date,
        required: true,
        index: true
      },
      headers: {}
    }
  });

  GuardStoreEntry = mongoose.model('GuardStoreEntry', schema);

  MongoGuardStore = (function() {
    function MongoGuardStore() {}

    MongoGuardStore.prototype.buildQuery = function(request) {
      return flatten({
        request: request
      });
    };

    MongoGuardStore.prototype.set = function(request, cached, callback) {
      var query;
      query = this.buildQuery(request);
      return GuardStoreEntry.update(query, {
        request: request,
        cached: cached
      }, {
        upsert: true
      }, callback);
    };

    MongoGuardStore.prototype.get = function(request, callback) {
      var query;
      query = this.buildQuery(request);
      return GuardStoreEntry.findOne(query).lean().exec(function(err, entry) {
        if (err != null) {
          return callback(err);
        }
        return callback(null, entry != null ? entry.cached : void 0);
      });
    };

    MongoGuardStore.prototype["delete"] = function(request, callback) {
      var query;
      query = this.buildQuery(request);
      console.time(JSON.stringify(query));
      return GuardStoreEntry.find(query).lean().exec(function(err, entries) {
        console.timeEnd(JSON.stringify(query));
        if (err != null) {
          return callback(err);
        }
        if (entries.length === 0) {
          return callback(null, void 0);
        }
        return GuardStoreEntry.remove({
          _id: {
            $in: entries
          }
        }, function(err) {
          var entry, values;
          if (err != null) {
            return callback(err);
          }
          values = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = entries.length; _i < _len; _i++) {
              entry = entries[_i];
              _results.push(entry.cached);
            }
            return _results;
          })();
          if (values.length === 1) {
            values = values[0];
          }
          return callback(null, values);
        });
      });
    };

    MongoGuardStore.prototype.drop = function(callback) {
      return GuardStoreEntry.remove({}, callback);
    };

    return MongoGuardStore;

  })();

  module.exports = MongoGuardStore;

  MongoGuardStore.Entry = GuardStoreEntry;

}).call(this);
